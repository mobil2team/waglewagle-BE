# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout
    - name: Checkout
      uses: actions/checkout@v3

    # JDK Set-up
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
         path: |
           ~/.gradle/caches
           ~/.gradle/wrapper
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
         restore-keys: |
           ${{ runner.os }}-gradle-

    # Grant Permission to gradle wrapper
    # gradle wrapper = 개발자가 특정 버전의 gradle을 미리 설치하지 않고도 gradle 빌드를 실행할 수 있게 해주는 편리한 도구
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Build Project
    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Cleanup Gradle Cache
      if: ${{ always() }}
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties

    # DockerHub 로그인
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Docker Build & Push
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_REPO }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Deploy
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_SERVER_HOST }}
        port: 22
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker start h2
          sudo docker rm $(sudo docker ps -a -q -f status=exited)
          sudo docker rmi $(sudo docker images -q)
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 80:80 -v /home/${{ secrets.EC2_USERNAME }}/data:/data ${{ secrets.DOCKER_REPO }}
